import os
import cv2
import numpy as np
import torch
from torch.utils.data import Dataset
import albumentations as A
from albumentations.pytorch import ToTensorV2

# ====================================================
# ‚öôÔ∏è 1Ô∏è‚É£ C·∫§U H√åNH NH√ÉN & BI·∫æN TO√ÄN C·ª§C
# ====================================================
LABEL_MAPPING = {0: 0, 29: 1, 76: 2, 150: 3, 179: 4, 226: 5}
IGNORE_INDEX = [255]
NUM_CLASSES = len(LABEL_MAPPING)
TARGET_SIZE = (256, 256)
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"

# ====================================================
# üß© 2Ô∏è‚É£ H√ÄM √ÅNH X·∫† NH√ÉN
# ====================================================
def remap_labels(mask: np.ndarray) -> np.ndarray:
    """
    Chuy·ªÉn nh√£n g·ªëc (RGB ho·∫∑c ID) th√†nh nh√£n hu·∫•n luy·ªán (0‚Äì5), 
    v√† g√°n 255 cho pixel b·ªã b·ªè qua.
    """
    new_mask = np.full_like(mask, 255, dtype=np.uint8)
    for old_id, new_id in LABEL_MAPPING.items():
        new_mask[mask == old_id] = new_id
    for ign in IGNORE_INDEX:
        new_mask[mask == ign] = 255
    return new_mask


# ====================================================
# üß† 3Ô∏è‚É£ CLASS DATASET CHU·∫®N H√ìA
# ====================================================
class ISPRSDataset(Dataset):
    def __init__(self, img_dir, mask_dir=None, transform=None):
        """
        Args:
            img_dir (str): Th∆∞ m·ª•c ·∫£nh g·ªëc
            mask_dir (str): Th∆∞ m·ª•c ch·ª©a mask t∆∞∆°ng ·ª©ng (None n·∫øu ch·ªâ inference)
            transform (albumentations.Compose): C√°c ph√©p augment (resize, flip, normalize,...)
        """
        self.img_dir = img_dir
        self.mask_dir = mask_dir
        self.file_list = sorted([
            f for f in os.listdir(img_dir)
            if f.lower().endswith((".jpg", ".png", ".jpeg"))
        ])
        self.transform = transform

    def __len__(self):
        return len(self.file_list)

    def __getitem__(self, idx):
        fname = self.file_list[idx]
        img_path = os.path.join(self.img_dir, fname)

        # ƒê·ªçc ·∫£nh RGB
        img = cv2.imread(img_path, cv2.IMREAD_COLOR)
        if img is None:
            raise FileNotFoundError(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {img_path}")
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        # === Ch·∫ø ƒë·ªô inference: kh√¥ng c√≥ mask ===
        if self.mask_dir is None:
            if self.transform:
                transformed = self.transform(image=img)
                img_tensor = transformed['image']
            else:
                img_tensor = torch.from_numpy(img.transpose(2, 0, 1) / 255.).float()
            dummy_mask = torch.zeros(TARGET_SIZE, dtype=torch.long)
            return img_tensor, dummy_mask

        # === Ch·∫ø ƒë·ªô train/val: c√≥ mask ===
        # Gi·∫£ ƒë·ªãnh t√™n mask thay ‚ÄúImage‚Äù b·∫±ng ‚ÄúLabel‚Äù
        mask_path = os.path.join(self.mask_dir, fname.replace("Image", "Label"))
        if not os.path.exists(mask_path):
            raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y mask cho ·∫£nh: {fname}")

        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
        if mask is None:
            raise FileNotFoundError(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc mask: {mask_path}")

        # Resize (n·∫øu transform kh√¥ng c√≥ resize)
        img = cv2.resize(img, TARGET_SIZE, interpolation=cv2.INTER_LINEAR)
        mask = cv2.resize(mask, TARGET_SIZE, interpolation=cv2.INTER_NEAREST)
        mask = remap_labels(mask)

        # Augmentation b·∫±ng Albumentations
        if self.transform:
            augmented = self.transform(image=img, mask=mask)
            img, mask = augmented['image'], augmented['mask']
            if mask.dtype != torch.long:
                mask = mask.long()
        else:
            img = torch.from_numpy(img.transpose(2, 0, 1) / 255.).float()
            mask = torch.from_numpy(mask).long()

        return img, mask
